## Requires a 3DBase to be present
## Vertex variables
# uniform
uniform mat4 u_MVMatrix;		// A constant representing the combined model/view matrix.

# attribute
attribute vec3 a_Normal;			// Per-vertex normal information we will pass in.

# body
// Transform the vertex into eye space. 	
v_Position = vec3(u_MVMatrix * a_Position);            

// Transform the normal's orientation into eye space.
v_Normal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));

# end

## Shared variables
# varying
varying vec3 v_Position;// This will be passed into the fragment shader.       		
varying vec3 v_Normal;	// This will be passed into the fragment shader.

## Fragment variables
# uniform
uniform vec3 u_LightPos;       	// The position of the light in eye space

# body
// Will be used for attenuation.
float distance = length(u_LightPos - v_Position);

// Get a lighting direction vector from the light to the vertex.
vec3 lightVector = normalize(u_LightPos - v_Position);              	

// Calculate the dot product of the light vector and vertex normal. If the normal and light vector are
// pointing in the same direction then it will get max illumination.
float diffuse = max(dot(v_Normal, lightVector), 0.0);               	  		  													  

// Add attenuation. 
diffuse = diffuse * (1.0 / (1.0 + (0.10 * distance)));
    
// Add ambient lighting
diffuse = diffuse + 0.3;

# end
* diffuse
